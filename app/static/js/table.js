// static/js/table.js
let currentTableData = [];

async function showTableSection() {
    console.log('showTableSection –≤—ã–∑–≤–∞–Ω–∞');

    hideAllSections();
    const tableSection = document.getElementById('table-section');

    if (tableSection) {
        tableSection.style.display = 'block';
        console.log('–¢–∞–±–ª–∏—Ü–∞ –ø–æ–∫–∞–∑–∞–Ω–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
        await loadTableData();
    } else {
        console.error('–°–µ–∫—Ü–∏—è table-section –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ DOM');
    }
}

async function loadTableData() {
    console.log('loadTableData –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ');

    try {
        const projectName = document.querySelector('meta[name="project-name"]')?.getAttribute('content') || "GribLand";
        const serverBanner = document.querySelector('.server-banner .sb-value');
        const serverName = serverBanner ? serverBanner.textContent.trim() : "OneBlock";

        console.log('Project:', projectName, 'Server:', serverName);

        const monthSelect = document.getElementById('table-month');
        const selectedMonth = monthSelect ? monthSelect.value : 'current';

        const date = new Date();
        let month, year;
        if (selectedMonth === 'current') {
            month = (date.getMonth() + 1).toString().padStart(2, '0');
            year = date.getFullYear();
        } else {
            month = (date.getMonth() === 0 ? 12 : date.getMonth()).toString().padStart(2, '0');
            year = date.getMonth() === 0 ? date.getFullYear() - 1 : date.getFullYear();
        }

        const monthStr = `${year}-${month}`;
        console.log('–ú–µ—Å—è—Ü:', monthStr);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const tbody = document.getElementById('table-body');
        tbody.innerHTML = '<tr><td colspan="10" style="text-align: center; padding: 40px;">üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</td></tr>';

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
        console.log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º /get_staff...');
        const staffResponse = await fetch('/get_staff');

        if (!staffResponse.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${staffResponse.status}`);
        }

        const staffData = await staffResponse.json();
        console.log('–î–∞–Ω–Ω—ã–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:', staffData);

        if (!staffData.body || !staffData.body.users) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤');
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        console.log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã...');
        const tableResponse = await fetch(`/get_table_data?project=${encodeURIComponent(projectName)}&server=${encodeURIComponent(serverName)}&month=${encodeURIComponent(monthStr)}`);

        let savedData = [];
        if (tableResponse.ok) {
            savedData = await tableResponse.json();
            console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', savedData);
        } else {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã');
        }

        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        const savedDataMap = {};
        savedData.forEach(item => {
            savedDataMap[item.nickname] = item;
        });

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ —Ä–æ–ª—è–º
        const moderators = Object.entries(staffData.body.users)
            .sort((a, b) => {
                const roleOrder = {
                    'group.curator': 1,
                    'group.grandmoderator': 2,
                    'group.stmoderator': 3,
                    'group.moder': 4,
                    'group.helper': 5,
                    'group.stajer': 6
                };
                return (roleOrder[a[1]] || 999) - (roleOrder[b[1]] || 999);
            });

        console.log('–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã:', moderators);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML —Ç–∞–±–ª–∏—Ü—ã
        tbody.innerHTML = '';
        currentTableData = [];

        if (moderators.length === 0) {
            tbody.innerHTML = '<tr><td colspan="10" style="text-align: center; padding: 40px;">üë• –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞—Ö</td></tr>';
            return;
        }

        moderators.forEach(([nickname, roleCode]) => {
            const saved = savedDataMap[nickname] || {};

            const rowData = {
                nickname: nickname,
                project: projectName,
                server: serverName,
                month: monthStr,
                online_hours: saved.online_hours || 0,
                questions: saved.questions || 0,
                complaints: saved.complaints || 0,
                severe_complaints: saved.severe_complaints || 0,
                attached_moderators: saved.attached_moderators || 0,
                interviews: saved.interviews || 0,
                online_top: saved.online_top || '',
                questions_top: saved.questions_top || ''
            };

            currentTableData.push(rowData);

            const row = document.createElement('tr');
            row.innerHTML = `
                <td class="nickname-cell">${nickname}</td>
                <td><input type="number" value="${rowData.online_hours}" data-field="online_hours" data-nickname="${nickname}"></td>
                <td><input type="number" value="${rowData.questions}" data-field="questions" data-nickname="${nickname}"></td>
                <td><input type="number" value="${rowData.complaints}" data-field="complaints" data-nickname="${nickname}"></td>
                <td><input type="number" value="${rowData.severe_complaints}" data-field="severe_complaints" data-nickname="${nickname}"></td>
                <td><input type="number" value="${rowData.attached_moderators}" data-field="attached_moderators" data-nickname="${nickname}"></td>
                <td><input type="number" value="${rowData.interviews}" data-field="interviews" data-nickname="${nickname}"></td>
                <td><input type="number" value="${rowData.online_top}" data-field="online_top" data-nickname="${nickname}" min="1" max="3" placeholder="-"></td>
                <td><input type="number" value="${rowData.questions_top}" data-field="questions_top" data-nickname="${nickname}" min="1" max="3" placeholder="-"></td>
                <td><button class="save-row-btn" onclick="saveRowData('${nickname}')">üíæ</button></td>
            `;
            tbody.appendChild(row);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        addInputListeners();
        console.log('–¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã:', error);
        const tbody = document.getElementById('table-body');
        tbody.innerHTML =
            `<tr><td colspan="10" style="text-align: center; color: #ff4444; padding: 40px;">
                ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}
                <br><button onclick="loadTableData()" style="margin-top: 10px; padding: 8px 16px; background: #ff4444; color: white; border: none; border-radius: 6px; cursor: pointer;">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
            </td></tr>`;
    }
}

function addInputListeners() {
    const inputs = document.querySelectorAll('#table-body input');
    inputs.forEach(input => {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        input.removeEventListener('input', handleInputChange);
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        input.addEventListener('input', handleInputChange);
    });
}

function handleInputChange(event) {
    const input = event.target;
    const nickname = input.getAttribute('data-nickname');
    const field = input.getAttribute('data-field');
    let value = input.value;

    // –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ, –¥–ª—è –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
    if (value === '') {
        value = '';
    } else {
        value = parseInt(value) || 0;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ currentTableData
    const rowData = currentTableData.find(row => row.nickname === nickname);
    if (rowData) {
        rowData[field] = value;
        console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${nickname}.${field} = ${value}`);
    }
}

async function saveRowData(nickname) {
    console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è:', nickname);

    const rowData = currentTableData.find(row => row.nickname === nickname);
    if (!rowData) {
        showNotification('‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }

    try {
        const response = await fetch('/save_table_data', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(rowData)
        });

        if (response.ok) {
            showNotification(`‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è ${nickname} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã`);
        } else {
            const errorText = await response.text();
            throw new Error(errorText || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message);
    }
}

async function saveAllTableData() {
    console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...');

    try {
        const response = await fetch('/save_table_data_batch', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(currentTableData)
        });

        if (response.ok) {
            showNotification('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        } else {
            const errorText = await response.text();
            throw new Error(errorText || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message);
    }
}

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
function showNotification(message, duration = 3000) {
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    let notificationContainer = document.getElementById('notification-container');
    if (!notificationContainer) {
        notificationContainer = document.createElement('div');
        notificationContainer.id = 'notification-container';
        notificationContainer.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 10000;
        `;
        document.body.appendChild(notificationContainer);
    }

    const notification = document.createElement('div');
    notification.style.cssText = `
        background: rgba(0, 0, 0, 0.9);
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        margin-bottom: 10px;
        border-left: 4px solid #FFD700;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    `;
    notification.textContent = message;

    notificationContainer.appendChild(notification);

    setTimeout(() => {
        notification.style.opacity = '0';
        notification.style.transition = 'opacity 0.5s';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 500);
    }, duration);
}