async function showSalaryCalculator() {
    hideAllSections();
    let salaryContainer = document.getElementById("salary-section");
    let staffList = document.getElementById("staff-list");
    salaryContainer.style.display = "block";

    // –ü–æ–ª—É—á–∞–µ–º project_name –∏–∑ –º–µ—Ç–∞—Ç–µ–≥–∞
    var projectName = document.querySelector('meta[name="project-name"]').getAttribute('content');

    staffList.innerHTML = `
        <div class="staff-card" style="grid-column: 1 / -1; text-align: center; justify-content: center;">
            <div class="staff-name">–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤...</div>
        </div>
    `;

    try {
        console.log("–ó–∞–ø—Ä–æ—Å –Ω–∞ /get_staff...");
        const res = await fetch("/get_staff");
        console.log("–û—Ç–≤–µ—Ç –æ—Ç /get_staff:", res);

        if (!res.ok) {
            throw new Error("–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ");
        }

        const data = await res.json();
        console.log("–î–∞–Ω–Ω—ã–µ –æ—Ç /get_staff:", data);

        staffList.innerHTML = "";

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ —Ä–æ–ª—è–º –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const sortedModerators = Object.entries(data.body.users).sort((a, b) => {
            const roleOrder = {
                'group.curator': 1,
                'group.grandmoderator': 2,
                'group.stmoderator': 3,
                'group.moder': 4,
                'group.helper': 5,
                'group.stajer': 6
            };
            return roleOrder[a[1]] - roleOrder[b[1]];
        });

        for (const [name, role] of sortedModerators) {
            const roleText = {
                'group.curator': '–ö—É—Ä–∞—Ç–æ—Ä',
                'group.grandmoderator': '–ì–ª.–º–æ–¥–µ—Ä–∞—Ç–æ—Ä',
                'group.stmoderator': '–°—Ç.–º–æ–¥–µ—Ä–∞—Ç–æ—Ä',
                'group.moder': '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
                'group.helper': '–•–µ–ª–ø–µ—Ä',
                'group.stajer': '–°—Ç–∞–∂—ë—Ä'
            }[role] || role;

            staffList.innerHTML += `
                <div class="staff-card" onclick="openSalaryModal('${name}','${roleText}')">
                    <img src="https://meta-api.metalabs.work/api/v3/users/skins/${projectName}/head/${name}"
                         class="staff-skin" alt="${name}">
                    <div class="staff-info">
                        <div class="staff-name">${name}</div>
                        <div class="staff-role" data-role="${roleText}">${roleText}</div>
                    </div>
                </div>`;
        }
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", err);
        staffList.innerHTML = `
            <div class="staff-card" style="grid-column: 1 / -1; text-align: center; justify-content: center; background: rgba(255,0,0,0.1);">
                <div class="staff-name" style="color: #ff4444;">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</div>
                <div class="staff-role">${err.message}</div>
            </div>
        `;
    }
}

async function updateOnlineHours(nickname) {
    try {
        const monthSelect = document.getElementById('salary-month');
        const selectedMonth = monthSelect.value;

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
        const now = new Date();
        let year = now.getFullYear();
        let month = now.getMonth() + 1; // –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü (1-12)

        if (selectedMonth === 'previous') {
            month = month - 1;
            if (month === 0) {
                month = 12;
                year = year - 1;
            }
        }

        const startDate = `${year}-${month.toString().padStart(2, '0')}-01`;
        const endDate = new Date(year, month, 0).toISOString().split('T')[0];

        console.log(`üîç –ó–∞–ø—Ä–æ—Å –æ–Ω–ª–∞–π–Ω–∞ –¥–ª—è ${nickname} –∑–∞ ${startDate} - ${endDate}`);

        const response = await fetch(`/check_online?nickname=${encodeURIComponent(nickname)}&start_date=${startDate}&end_date=${endDate}`);

        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
        }

        const data = await response.json();

        const onlineHoursInput = document.getElementById('online_hours');

        if (data && data.time) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ "119—á 45–º"
            const hoursMatch = data.time.match(/(\d+)—á/);
            const hours = hoursMatch ? parseInt(hoursMatch[1]) : 0;
            onlineHoursInput.value = hours;
            console.log(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: ${hours} —á–∞—Å–æ–≤`);
        } else {
            onlineHoursInput.value = 0;
        }

    } catch (error) {
        document.getElementById('online_hours').value = 0;
    }
}
// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', function() {
    const monthSelect = document.getElementById('salary-month');
    if (monthSelect) {
        monthSelect.addEventListener('change', function() {
            const nickname = document.getElementById('nickname').value;
            if (nickname) {
                updateOnlineHours(nickname);
            }
        });
    }
});
function openSalaryModal(nickname, role) {
    const modal = document.getElementById('salary-modal');
    const staffName = document.getElementById('modal-staff-name');
    const staffRole = document.getElementById('modal-staff-role');
    const staffSkin = document.getElementById('modal-staff-skin');
    const nicknameInput = document.getElementById('nickname');

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    staffName.textContent = nickname;
    staffRole.textContent = role;

    // –ü–æ–ª—É—á–∞–µ–º project_name –¥–ª—è —Å–∫–∏–Ω–∞
    const projectName = document.querySelector('meta[name="project-name"]').getAttribute('content');
    staffSkin.src = `https://meta-api.metalabs.work/api/v3/users/skins/${projectName}/head/${nickname}`;

    nicknameInput.value = nickname;

    // –°–∫—Ä—ã–≤–∞–µ–º/–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    const severeComplaintsGroup = document.getElementById('severe_complaints_group');
    const interviewsGroup = document.getElementById('interviews_group');

    if (role === '–ö—É—Ä–∞—Ç–æ—Ä' || role === '–ì–ª.–º–æ–¥–µ—Ä–∞—Ç–æ—Ä' || role === '–°—Ç.–º–æ–¥–µ—Ä–∞—Ç–æ—Ä') {
        severeComplaintsGroup.style.display = 'block';
        interviewsGroup.style.display = 'block';
    } else {
        severeComplaintsGroup.style.display = 'none';
        interviewsGroup.style.display = 'none';
        // –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        document.getElementById('severe_complaints').value = '';
        document.getElementById('interviews').value = '';
    }

    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    clearSalaryForm();

    // –ü–æ–ª—É—á–∞–µ–º –æ–Ω–ª–∞–π–Ω –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
    updateOnlineHours(nickname);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    modal.classList.add('show');
}

function closeSalaryModal() {
    document.getElementById('salary-modal').classList.remove('show');
}

function calculateStaffSalary() {
    const nickname = document.getElementById('nickname').value;
    const role = document.getElementById('modal-staff-role').textContent;
    const online_hours = parseInt(document.getElementById('online_hours').value) || 0;
    const questions = parseInt(document.getElementById('questions').value) || 0;
    const complaints = parseInt(document.getElementById('complaints').value) || 0;
    const severe_complaints = parseInt(document.getElementById('severe_complaints').value) || 0;
    const attached_moderators = parseInt(document.getElementById('attached_moderators').value) || 0;
    const interviews = parseInt(document.getElementById('interviews').value) || 0;
    const online_top = document.getElementById('online_top').value ? parseInt(document.getElementById('online_top').value) : null;
    const questions_top = document.getElementById('questions_top').value ? parseInt(document.getElementById('questions_top').value) : null;
    const gma_review = parseInt(document.getElementById('gma_review').value) || 0;

    const monthSelect = document.getElementById('salary-month');
    const selectedMonth = monthSelect.value === 'current' ?
        new Date().toISOString().slice(0, 7) :
        (() => {
            const date = new Date();
            date.setMonth(date.getMonth() - 1);
            return date.toISOString().slice(0, 7);
        })();

    let report = `üí∞ –†–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–ª—è ${role} ${nickname} üí∞\n\n`;

    // –ë–∞–∑–æ–≤—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
    const online_payment = online_hours <= 40 ? online_hours * 7 : 40 * 10 + (online_hours - 40) * 12;
    report += `üîπ –û–Ω–ª–∞–π–Ω (${online_hours} —á) = ${online_payment} —Ä—É–±–∏–Ω–æ–≤\n`;
    report += `üîπ –í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç (${questions}) = ${questions * 10} —Ä—É–±–∏–Ω–æ–≤\n`;
    report += `üîπ –ñ–∞–ª–æ–±—ã (${complaints}) = ${complaints * 10} —Ä—É–±–∏–Ω–æ–≤\n`;
    report += `üîπ –ñ–∞–ª–æ–±—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ (${severe_complaints}) = ${severe_complaints * 15} —Ä—É–±–∏–Ω–æ–≤\n`;
    report += `üîπ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã (${attached_moderators}) = ${attached_moderators * 100} —Ä—É–±–∏–Ω–æ–≤\n`;
    report += `üîπ –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è (${interviews}) = ${interviews * 100} —Ä—É–±–∏–Ω–æ–≤\n`;

    let base_salary = online_payment + (questions * 10) + (complaints * 10) +
                     (severe_complaints * 15) + (attached_moderators * 100) + (interviews * 100);
    let total_salary = base_salary;

    // –ë–æ–Ω—É—Å—ã –∑–∞ —Ç–æ–ø—ã
    if (online_top) {
        const bonus = {1: 0.15, 2: 0.10, 3: 0.05}[online_top] || 0;
        const bonus_amount = base_salary * bonus;
        total_salary += bonus_amount;
        report += `üèÜ –ë–æ–Ω—É—Å –∑–∞ —Ç–æ–ø –æ–Ω–ª–∞–π–Ω (${online_top} –º–µ—Å—Ç–æ) = ${bonus_amount.toFixed(2)} —Ä—É–±–∏–Ω–æ–≤\n`;
    }

    if (questions_top) {
        const bonus = {1: 0.15, 2: 0.10, 3: 0.05}[questions_top] || 0;
        const bonus_amount = base_salary * bonus;
        total_salary += bonus_amount;
        report += `üèÜ –ë–æ–Ω—É—Å –∑–∞ —Ç–æ–ø –≤–æ–ø—Ä–æ—Å—ã (${questions_top} –º–µ—Å—Ç–æ) = ${bonus_amount.toFixed(2)} —Ä—É–±–∏–Ω–æ–≤\n`;
    }

    total_salary += gma_review;
    report += `üîπ –†–µ—Ü–µ–Ω–∑–∏—è –ì–ú–ê = ${gma_review} —Ä—É–±–∏–Ω–æ–≤\n\n`;
    report += `üí∞ **–ò—Ç–æ–≥–æ: ${Math.round(total_salary)} —Ä—É–±–∏–Ω–æ–≤**`;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    window.currentSalaryData = {
        nickname: nickname,
        role: role,
        online_hours: online_hours,
        questions: questions,
        complaints: complaints,
        severe_complaints: severe_complaints,
        attached_moderators: attached_moderators,
        interviews: interviews,
        online_top: online_top,
        questions_top: questions_top,
        gma_review: gma_review,
        total_salary: Math.round(total_salary),
        month: selectedMonth
    };

    const salaryResult = document.getElementById('salary-result');
    salaryResult.innerHTML = report;
    salaryResult.style.display = 'block';

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    document.getElementById('confirm-salary').style.display = 'inline-block';
}

function getMonthData(isPrevious = true) {
    const now = new Date();
    let targetMonth, targetYear;

    if (isPrevious) {
        targetMonth = now.getMonth() === 0 ? 11 : now.getMonth() - 1;
        targetYear = now.getMonth() === 0 ? now.getFullYear() - 1 : now.getFullYear();
    } else {
        targetMonth = now.getMonth();
        targetYear = now.getFullYear();
    }

    return {
        month: targetMonth + 1,
        year: targetYear,
        monthStr: `${targetYear}-${String(targetMonth + 1).padStart(2, '0')}`
    };
}

function clearSalaryForm() {
    const inputs = document.querySelectorAll('.salary-form input');
    inputs.forEach(input => {
        if (input.id !== 'nickname') {
            input.value = '';
        }
    });

    document.getElementById('salary-result').style.display = 'none';
    document.getElementById('confirm-salary').style.display = 'none';
    document.getElementById('send-telegram').style.display = 'none';
}
function getServerName() {
    // –ü–æ–ª—É—á–∞–µ–º –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ .server-banner
    const serverBanner = document.querySelector('.server-banner .sb-value');
    if (serverBanner) {
        return serverBanner.textContent.trim();
    }

    // Fallback –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    return "OneBlock"; // –∏–ª–∏ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

const projectName = document.querySelector('meta[name="project-name"]')?.getAttribute('content') || "GribLand";
const serverName = getServerName(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é

console.log("Project:", projectName, "Server:", serverName); // –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
// === –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø ===

// –ó–∞—Ç–µ–º –∏–¥–µ—Ç –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥...
async function confirmSalary() {
    try {
        if (!window.currentSalaryData) {
            throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        }

        const role = document.getElementById('modal-staff-role').textContent.trim();
        const status = (role === '–ü–°–ñ') ? '–ü–°–ñ' : '–ê–∫—Ç–∏–≤';

        const salaryData = {
            ...window.currentSalaryData,
            project: projectName, // –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞
            server: serverName,   // –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞
            status: status
        };

        console.log("Saving salary data:", salaryData); // –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

        const response = await fetch('/save_salary', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(salaryData)
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(errorText);
        }

        showNotification('–ó–∞—Ä–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
        document.getElementById('send-telegram').style.display = 'inline-block';
    } catch (error) {
        console.error('Error saving salary:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ' + error.message);
    }
}

async function sendToTelegram() {
    const nickname = document.getElementById('nickname').value;
    const monthSelect = document.getElementById('salary-month');
    const selectedMonth = monthSelect.value;

    const role = window.currentSalaryData.role || '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä';

    const date = new Date();
    let month, year;

    if (selectedMonth === 'current') {
        month = (date.getMonth() + 1).toString().padStart(2, '0');
        year = date.getFullYear();
    } else {
        if (date.getMonth() === 0) {
            month = '12';
            year = date.getFullYear() - 1;
        } else {
            month = date.getMonth().toString().padStart(2, '0');
            year = date.getFullYear();
        }
    }

    try {
        const response = await fetch(`/send_salary_telegram`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                ...window.currentSalaryData,
                nickname: nickname,
                role: role,
                month: `${year}-${month}`,
                project: projectName,
                server: serverName
            })
        });


        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(errorText || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }

        const result = await response.json();

        if (result.success) {
            showNotification('–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!');
            closeSalaryModal();
            clearSalaryForm();
        } else {
            showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ' + (result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ' + error.message);
    }
}

async function sendSalaryReportToTelegram() {
    const monthSelect = document.getElementById('report-month');
    const selectedMonth = monthSelect.value;

    const date = new Date();
    let month, year;

    if (selectedMonth === 'current') {
        month = (date.getMonth() + 1).toString().padStart(2, '0');
        year = date.getFullYear();
    } else {
        month = (date.getMonth() === 0 ? 12 : date.getMonth()).toString().padStart(2, '0');
        year = date.getMonth() === 0 ? date.getFullYear() - 1 : date.getFullYear();
    }

    const monthStr = `${year}-${month}`;

    try {
        const response = await fetch("/send_full_salary_report", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                project: projectName,
                server: serverName,
                month: monthStr
            })
        });

        const result = await response.json();
        if (result.success) {
            showNotification("–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!");
        } else {
            showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: " + (result.error || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"));
        }
    } catch (err) {
        showNotification("–û—à–∏–±–∫–∞: " + err.message);
    }
}

function showNotification(message, duration = 5000) {
    const notification = document.createElement('div');
    notification.className = 'notification';
    notification.textContent = message;
    document.body.appendChild(notification);

    setTimeout(() => {
        notification.classList.add('show');
    }, 100);

    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
            document.body.removeChild(notification);
        }, 500);
    }, duration);
}