from fastapi import Depends, HTTPException
from starlette.status import HTTP_401_UNAUTHORIZED
import httpx
from fastapi import FastAPI, Request, Form
from fastapi import Query
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse, RedirectResponse
from starlette.middleware.sessions import SessionMiddleware
from datetime import datetime
from fastapi.staticfiles import StaticFiles
import os
from app.db import db

app = FastAPI()

static_dir = os.path.join(os.path.dirname(__file__), "static")
os.makedirs(static_dir, exist_ok=True)

app.mount("/static", StaticFiles(directory=static_dir), name="static")



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π
app.add_middleware(SessionMiddleware, secret_key="your_secret_key")

templates = Jinja2Templates(directory="app/templates")

# API URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è UUID –∏ —Å–∫–∏–Ω–∞
PLAYTIME_PERIOD_URL_TEMPLATE = "https://meta-api.metalabs.work/api/v3/playtime/{project}/{server}/list?min={min}&max={max}&uuids[]="
API_PLAYTIME_URL = "https://meta-api.metalabs.work/api/v3/playtime"
STAFF_URL_TEMPLATE = "https://meta-api.metalabs.work/api/v3/users/{project}/{server}/staff"
API_BASE_URL = "https://meta-api.metalabs.work/api/v3/users"
PLAYTIME_URL_TEMPLATE = "https://meta-api.metalabs.work/api/v3/playtime/{project}/{server}/list?uuids[]="


@app.on_event("startup")
async def startup():
    await db.connect()
    await db.create_users_table()
    # üëá –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç
    if not await db.user_exists("killchik"):
        await db.add_user("killchik", "admin—ã")

    if not await db.user_exists("admin"):
        await db.add_user("admin", "password123")

def require_login(request: Request):
    if not request.session.get("username"):
        return RedirectResponse("/", status_code=303)

# ‚úÖ **–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞**
@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})
@app.post("/login")
async def login(request: Request, username: str = Form(...), password: str = Form(...)):
    if await db.verify_user(username, password):
        request.session["username"] = username
        return RedirectResponse(url="/projects", status_code=303)
    return templates.TemplateResponse("index.html", {"request": request, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å"})
# ‚úÖ **–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –ª–æ–≥–∏–Ω–∞**


@app.get("/logout")
async def logout(request: Request):
    request.session.clear()
    return RedirectResponse(url="/", status_code=303)

# ‚úÖ **–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞**
@app.get("/projects")
async def show_projects(request: Request, _: str = Depends(require_login)):
    return templates.TemplateResponse("projects.html", {"request": request})

# ‚úÖ **–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ—Å–ª–µ –∫–ª–∏–∫–∞)**
@app.get("/select_project/{project_name}")
async def select_project(request: Request, project_name: str, _: str = Depends(require_login)):
    request.session["project_name"] = project_name
    return templates.TemplateResponse("server_selection.html", {"request": request, "project_name": project_name})

# ‚úÖ **–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞**
@app.get("/server/{server_name}")
async def select_server(request: Request, server_name: str, _: str = Depends(require_login)):
    project_name = request.session.get("project_name", "–ù–µ –≤—ã–±—Ä–∞–Ω")
    request.session["server_name"] = server_name
    username = request.session.get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    # –ü–æ–ª—É—á–∞–µ–º UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_uuid = await get_user_uuid(project_name, username)
    user_skin_url = await get_user_skin(project_name, user_uuid)

    # –ü–æ–ª—É—á–∞–µ–º –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–∞ –∑–∞ –º–µ—Å—è—Ü
    monthly_playtime = await get_monthly_playtime(project_name, server_name, user_uuid)

    return templates.TemplateResponse("server_details.html", {
        "request": request,
        "server_name": server_name,
        "project_name": project_name,
        "user_skin_url": user_skin_url,
        "user_uuid": user_uuid,
        "username": username,
        "monthly_playtime": monthly_playtime  # –ü–µ—Ä–µ–¥–∞–µ–º –æ–Ω–ª–∞–π–Ω –≤ —à–∞–±–ª–æ–Ω
    })


import asyncio

@app.get("/get_moderator_activity")
async def get_moderator_activity(request: Request, _: str = Depends(require_login)):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ –æ–Ω–ª–∞–π–Ω—É"""
    project_name = request.session.get("project_name", "–ù–µ –≤—ã–±—Ä–∞–Ω")
    server_name = request.session.get("server_name", "–ù–µ –≤—ã–±—Ä–∞–Ω")

    # üîπ –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    staff = await get_server_staff(project_name, server_name)
    if not staff:
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"}

    all_uuids = staff["stmoderators"] + staff["moderators"] + staff["helpers"] + staff["interns"]

    # üîπ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∏–∫–Ω–µ–π–º—ã —Ä–∞–∑–æ–º
    nicknames = await get_nicknames_by_uuids(all_uuids, project_name)

    # üîπ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è **–æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º**
    headers = {"Meta-Api-Key": "sATznYRhaQ1bDYAptTtXpsJXPCtsUP"}
    url = f"https://meta-api.metalabs.work/api/v3/playtime/{project_name}/{server_name}/list"

    async with httpx.AsyncClient() as client:
        response = await client.get(url, headers=headers, params={"uuids[]": all_uuids})
        if response.status_code != 200:
            return {"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ–Ω–ª–∞–π–Ω–∞"}

        data = response.json()
        if data.get("error") or "body" not in data:
            return {"error": "–û—à–∏–±–∫–∞ API"}

        online_points = data["body"]

    # üîπ –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
    current_date = datetime.now()
    current_year = str(current_date.year)
    current_month = f"{current_date.month:02d}"  # –î–≤—É–∑–Ω–∞—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Å—è—Ü–∞

    # üîπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    activity_list = []
    for uuid in all_uuids:
        user_data = online_points.get(uuid, {})
        total_seconds = sum(
            time for date, time in user_data.get("onlinePoints", {}).items()
            if date.startswith(f"{current_year}-{current_month}")  # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        )

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ß–ß:–ú–ú
        hours, minutes = divmod(total_seconds // 60, 60)
        time_str = f"{hours}—á {minutes}–º"
        total_minutes = hours * 60 + minutes  # –í—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏

        activity_list.append({
            "nickname": nicknames.get(uuid, uuid),
            "hours": time_str,
            "total_minutes": total_minutes
        })

    # üîπ –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    activity_list.sort(key=lambda x: x["total_minutes"], reverse=True)

    return {"activity": activity_list}


# ‚úÖ **–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω–∞ –∑–∞ –º–µ—Å—è—Ü**
async def get_monthly_playtime(project_name: str, server_name: str, user_uuid: str, _: str = Depends(require_login)) -> str:
    url = PLAYTIME_URL_TEMPLATE.format(project=project_name, server=server_name) + user_uuid
    headers = {"Meta-Api-Key": "sATznYRhaQ1bDYAptTtXpsJXPCtsUP"}

    async with httpx.AsyncClient() as client:
        response = await client.get(url, headers=headers)
        if response.status_code == 200:
            data = response.json()
            if not data.get('error') and 'body' in data and user_uuid in data['body']:
                online_points = data['body'][user_uuid].get('onlinePoints', {})

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≥–æ–¥/–º–µ—Å—è—Ü
                current_date = datetime.now()
                year, month = current_date.year, current_date.month

                # –°—É–º–º–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–Ω–ª–∞–π–Ω–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
                total_seconds = sum(
                    time for date, time in online_points.items() if date.startswith(f"{year}-{month:02d}")
                )

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–∫—É–Ω–¥—ã –≤ –ß–ß:–ú–ú
                hours, minutes = divmod(total_seconds // 60, 60)
                return f"{hours}—á {minutes}–º"

        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

# ‚úÖ **–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**
async def get_user_uuid(project_name: str, username: str, _: str = Depends(require_login)) -> str:
    url = f"{API_BASE_URL}/{project_name}/get/uuids"
    headers = {
        "Meta-Api-Key": "sATznYRhaQ1bDYAptTtXpsJXPCtsUP"
    }
    params = {
        "nicks[]": username
    }

    async with httpx.AsyncClient() as client:
        response = await client.get(url, headers=headers, params=params)
        if response.status_code == 200:
            data = response.json()
            return data.get("body", {}).get(username, "UUID –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return "–û—à–∏–±–∫–∞ UUID"
async def get_user_skin(project_name: str, user_uuid: str) -> str:
    return f"https://meta-api.metalabs.work/api/v3/users/skins/{project_name}/head/{user_uuid}"

@app.get("/get_splaytime")
async def get_splaytime(request: Request, nickname: str = Query(...), start_date: str = Query(...), end_date: str = Query(...), _: str = Depends(require_login)):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –æ–Ω–ª–∞–π–Ω–∞ –∑–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    project_name = request.session.get("project_name", "–ù–µ –≤—ã–±—Ä–∞–Ω")
    server_name = request.session.get("server_name", "–ù–µ –≤—ã–±—Ä–∞–Ω")

    # –ü–æ–ª—É—á–∞–µ–º UUID –ø–æ –Ω–∏–∫—É
    uuid = await get_user_uuid(project_name, nickname)
    if uuid == "UUID –Ω–µ –Ω–∞–π–¥–µ–Ω":
        return {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ–Ω–ª–∞–π–Ω–∞
    url = PLAYTIME_PERIOD_URL_TEMPLATE.format(project=project_name, server=server_name, min=start_date, max=end_date) + uuid
    headers = {"Meta-Api-Key": "sATznYRhaQ1bDYAptTtXpsJXPCtsUP"}

    async with httpx.AsyncClient() as client:
        response = await client.get(url, headers=headers)
        if response.status_code == 200:
            data = response.json()
            if not data.get('error') and 'body' in data and uuid in data['body']:
                online_points = data['body'][uuid].get('onlinePoints', {})

                # –°—É–º–º–∏—Ä—É–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –∑–∞ –ø–µ—Ä–∏–æ–¥
                total_seconds = sum(online_points.values())

                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
                hours, minutes = divmod(total_seconds // 60, 60)
                return {"nickname": nickname, "time": f"{hours}—á {minutes}–º"}

    return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"}

async def get_server_staff(project_name: str, server_name: str, _: str = Depends(require_login)):
    url = STAFF_URL_TEMPLATE.format(project=project_name, server=server_name)
    headers = {"Meta-Api-Key": "sATznYRhaQ1bDYAptTtXpsJXPCtsUP"}

    async with httpx.AsyncClient() as client:
        response = await client.get(url, headers=headers)
        if response.status_code == 200:
            data = response.json()
            if not data.get('error') and 'body' in data and 'users' in data['body']:
                users = data['body']['users']

                # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –≥—Ä—É–ø–ø–∞–º
                staff = {
                    "stmoderators": [],
                    "moderators": [],
                    "helpers": [],
                    "interns": []
                }

                for uuid, group in users.items():
                    if group == 'group.stmoderator':
                        staff["stmoderators"].append(uuid)
                    elif group == 'group.moder':
                        staff["moderators"].append(uuid)
                    elif group == 'group.helper':
                        staff["helpers"].append(uuid)
                    elif group == 'group.intern':
                        staff["interns"].append(uuid)

                return staff

    return None  # –û—à–∏–±–∫–∞ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–æ—Å—Ç–∞–≤


async def get_nicknames_by_uuids(uuids: list, project_name: str, _: str = Depends(require_login)):
    if not uuids:
        return {}
    print("1")
    url = f"{API_BASE_URL}/{project_name}/get/nicks"
    headers = {"Meta-Api-Key": "sATznYRhaQ1bDYAptTtXpsJXPCtsUP"}
    params = {"uuids[]": uuids}
    print(url)

    async with httpx.AsyncClient() as client:
        response = await client.get(url, headers=headers, params=params)
        print(response)
        if response.status_code == 200:
            data = response.json()
            return data.get("body", {})  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º {uuid: nickname}

    return {}

@app.get("/staff", response_class=HTMLResponse)
async def staff_page(request: Request, _: str = Depends(require_login)):
    project_name = request.session.get("project_name", "–ù–µ –≤—ã–±—Ä–∞–Ω")
    server_name = request.session.get("server_name", "–ù–µ –≤—ã–±—Ä–∞–Ω")

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–∞–≤ —Å–µ—Ä–≤–µ—Ä–∞
    staff = await get_server_staff(project_name, server_name)

    if not staff:
        return templates.TemplateResponse("staff.html", {
            "request": request,
            "project_name": project_name,
            "server_name": server_name,
            "staff": None,
            "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–∞–≤"
        })

    # –ü–æ–ª—É—á–∞–µ–º UUID –≤—Å–µ—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    all_uuids = staff["stmoderators"] + staff["moderators"] + staff["helpers"] + staff["interns"]
    print(all_uuids)

    # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º—ã –ø–æ UUID
    nicknames = await get_nicknames_by_uuids(all_uuids, project_name)
    print(nicknames)

    # ‚úÖ –ó–∞–º–µ–Ω—è–µ–º UUID –Ω–∞ –Ω–∏–∫–Ω–µ–π–º—ã
    def replace_uuids_with_nicknames(uuid_list):
        return [nicknames.get(uuid, uuid) for uuid in uuid_list]

    staff["stmoderators"] = replace_uuids_with_nicknames(staff["stmoderators"])
    staff["moderators"] = replace_uuids_with_nicknames(staff["moderators"])
    staff["helpers"] = replace_uuids_with_nicknames(staff["helpers"])
    staff["interns"] = replace_uuids_with_nicknames(staff["interns"])

    return templates.TemplateResponse("staff.html", {
        "request": request,
        "project_name": project_name,
        "server_name": server_name,
        "staff": staff,
        "nicknames": nicknames
    })

@app.get("/get_staff")
async def get_staff(request: Request, _: str = Depends(require_login)):
    project_name = request.session.get("project_name", "–ù–µ –≤—ã–±—Ä–∞–Ω")
    server_name = request.session.get("server_name", "–ù–µ –≤—ã–±—Ä–∞–Ω")

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–∞–≤ —Å–µ—Ä–≤–µ—Ä–∞
    staff = await get_server_staff(project_name, server_name)

    if not staff:
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–∞–≤"}

    # –ü–æ–ª—É—á–∞–µ–º UUID –≤—Å–µ—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    all_uuids = staff["stmoderators"] + staff["moderators"] + staff["helpers"] + staff["interns"]

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º—ã
    nicknames = await get_nicknames_by_uuids(all_uuids, project_name)

    # –ó–∞–º–µ–Ω—è–µ–º UUID –Ω–∞ –Ω–∏–∫–Ω–µ–π–º—ã
    def replace_uuids_with_nicknames(uuid_list):
        return [nicknames.get(uuid, uuid) for uuid in uuid_list]

    staff["stmoderators"] = replace_uuids_with_nicknames(staff["stmoderators"])
    staff["moderators"] = replace_uuids_with_nicknames(staff["moderators"])
    staff["helpers"] = replace_uuids_with_nicknames(staff["helpers"])
    staff["interns"] = replace_uuids_with_nicknames(staff["interns"])

    return {"staff": staff}

